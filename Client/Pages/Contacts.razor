@page "/contacts"
@using BlazingChat.Service.ViewsModels;
@inject NavigationManager NavigationManager
@inject IContactVM _contactVM

<PageTitle>Contactos</PageTitle>

<h1>Contactos</h1>

<p>Lista de contactos</p>
<div class="form-group">
    <input class="form-control" type="text" placeholder="Filter..."
           @bind="_filter"
           @bind:event="oninput">
</div>

<table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Nombre(s)</th>
                <th>Apellido(s)</th>
                <th>Teléfono</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in string.IsNullOrEmpty(_filter) ?_contactsList : _contactsList.Where(c => c.FirstName.Contains(_filter, StringComparison.InvariantCultureIgnoreCase) || c.LastName.Contains(_filter, StringComparison.InvariantCultureIgnoreCase) || c.Phone!.Contains(_filter, StringComparison.InvariantCultureIgnoreCase)))
            {
                <tr style="cursor: pointer;" @onclick="(e) => NavigateToChat(contact.ContactId)">                                       
                    <td>@contact.FirstName</td>
                    <td>@contact.LastName</td>
                    <td>@contact.Phone</td>
                    <td>@contact.Email</td>
                </tr>
            }
        </tbody>
    </table>
 

@code {

    private string _filter = string.Empty;
    private bool _selectChat = false;
    private string _activeClass = string.Empty;

    private List<IContactVM> _contactsList = new();


    protected override async Task OnInitializedAsync()
    {
        await foreach (var item in _contactVM.GetContacts())
        {
            _contactsList.Add(item);
            this.StateHasChanged();          
        }     
    }
    

    private void NavigateToChat(long id)
    {
        NavigationManager.NavigateTo($"/chat/{id}");
    }
}
