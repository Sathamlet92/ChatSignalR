@page "/contacts"
@attribute [Authorize]
@using BlazingChat.Service.ViewsModels;
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _auth
@inject IContactVM _contactVM

<PageTitle>Contactos</PageTitle>

<h1>Contactos</h1>

<p>Lista de contactos</p>
<div class="form-group">
    <input class="form-control" type="text" placeholder="Filter..."
           @bind="_filter"
           @bind:event="oninput">
</div>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Nombre(s)</th>
            <th>Apellido(s)</th>
            <th>Teléfono</th>
            <th>Email</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize 
            Items="@(string.IsNullOrEmpty(_filter) ?_contactsList : _contactsList.Where(c => c.FirstName.Contains(_filter, StringComparison.InvariantCultureIgnoreCase) || c.LastName.Contains(_filter, StringComparison.InvariantCultureIgnoreCase) || c.Phone!.Contains(_filter, StringComparison.InvariantCultureIgnoreCase)).ToList())"
            Context="contact">
            <tr style="cursor: pointer;" @onclick="(e) => NavigateToChat(contact.ContactId)">                                       
                <td>@contact.FirstName</td>
                <td>@contact.LastName</td>
                <td >@contact.Phone</td>                   
                <td>@contact.Email</td>
            </tr>
        </Virtualize>
    </tbody>
</table>


 

@code {

    private string _filter = string.Empty;
    private List<IContactVM> _contactsList = new();

    protected override async Task OnInitializedAsync()
    {
        var authUser = await _auth.GetAuthenticationStateAsync();
        var user = authUser.User;
        if(user.Identity != null && user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type.Equals(ClaimTypes.NameIdentifier));
            await foreach (var item in _contactVM.GetContacts(Convert.ToInt64(claim!.Value)))
            {
                _contactsList.Add(item);
                this.StateHasChanged();          
            }
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }          
    }
    

    private void NavigateToChat(long id)
    {
        NavigationManager.NavigateTo($"/chat/{id}");
    }
}
